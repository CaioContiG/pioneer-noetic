// Generated by gencpp from file p2os_msgs/DIO.msg
// DO NOT EDIT!


#ifndef P2OS_MSGS_MESSAGE_DIO_H
#define P2OS_MSGS_MESSAGE_DIO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace p2os_msgs
{
template <class ContainerAllocator>
struct DIO_
{
  typedef DIO_<ContainerAllocator> Type;

  DIO_()
    : count(0)
    , bits(0)  {
    }
  DIO_(const ContainerAllocator& _alloc)
    : count(0)
    , bits(0)  {
  (void)_alloc;
    }



   typedef uint32_t _count_type;
  _count_type count;

   typedef uint16_t _bits_type;
  _bits_type bits;





  typedef boost::shared_ptr< ::p2os_msgs::DIO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p2os_msgs::DIO_<ContainerAllocator> const> ConstPtr;

}; // struct DIO_

typedef ::p2os_msgs::DIO_<std::allocator<void> > DIO;

typedef boost::shared_ptr< ::p2os_msgs::DIO > DIOPtr;
typedef boost::shared_ptr< ::p2os_msgs::DIO const> DIOConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p2os_msgs::DIO_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p2os_msgs::DIO_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::p2os_msgs::DIO_<ContainerAllocator1> & lhs, const ::p2os_msgs::DIO_<ContainerAllocator2> & rhs)
{
  return lhs.count == rhs.count &&
    lhs.bits == rhs.bits;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::p2os_msgs::DIO_<ContainerAllocator1> & lhs, const ::p2os_msgs::DIO_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace p2os_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::p2os_msgs::DIO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p2os_msgs::DIO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p2os_msgs::DIO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p2os_msgs::DIO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p2os_msgs::DIO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p2os_msgs::DIO_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p2os_msgs::DIO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d375575ab5b2233ab16927780da5f856";
  }

  static const char* value(const ::p2os_msgs::DIO_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd375575ab5b2233aULL;
  static const uint64_t static_value2 = 0xb16927780da5f856ULL;
};

template<class ContainerAllocator>
struct DataType< ::p2os_msgs::DIO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p2os_msgs/DIO";
  }

  static const char* value(const ::p2os_msgs::DIO_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p2os_msgs::DIO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 count\n"
"uint16 bits\n"
;
  }

  static const char* value(const ::p2os_msgs::DIO_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p2os_msgs::DIO_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
      stream.next(m.bits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DIO_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p2os_msgs::DIO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p2os_msgs::DIO_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.count);
    s << indent << "bits: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // P2OS_MSGS_MESSAGE_DIO_H

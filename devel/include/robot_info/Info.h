// Generated by gencpp from file robot_info/Info.msg
// DO NOT EDIT!


#ifndef ROBOT_INFO_MESSAGE_INFO_H
#define ROBOT_INFO_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robot_info
{
template <class ContainerAllocator>
struct Info_
{
  typedef Info_<ContainerAllocator> Type;

  Info_()
    : header()
    , voltage(0.0)
    , orientation(0.0)
    , velocity(0.0)
    , motor_status(0)
    , sonar_status()
    , arm_torque()
    , arm_status(0)
    , cam360_status(0)
    , second_cam_status(0)
    , map_status(0)
    , ptz_camera(0)  {
    }
  Info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage(0.0)
    , orientation(0.0)
    , velocity(0.0)
    , motor_status(0)
    , sonar_status(_alloc)
    , arm_torque(_alloc)
    , arm_status(0)
    , cam360_status(0)
    , second_cam_status(0)
    , map_status(0)
    , ptz_camera(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef double _orientation_type;
  _orientation_type orientation;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef int32_t _motor_status_type;
  _motor_status_type motor_status;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _sonar_status_type;
  _sonar_status_type sonar_status;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _arm_torque_type;
  _arm_torque_type arm_torque;

   typedef int32_t _arm_status_type;
  _arm_status_type arm_status;

   typedef int32_t _cam360_status_type;
  _cam360_status_type cam360_status;

   typedef int32_t _second_cam_status_type;
  _second_cam_status_type second_cam_status;

   typedef int32_t _map_status_type;
  _map_status_type map_status;

   typedef int32_t _ptz_camera_type;
  _ptz_camera_type ptz_camera;





  typedef boost::shared_ptr< ::robot_info::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_info::Info_<ContainerAllocator> const> ConstPtr;

}; // struct Info_

typedef ::robot_info::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::robot_info::Info > InfoPtr;
typedef boost::shared_ptr< ::robot_info::Info const> InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_info::Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_info::Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_info::Info_<ContainerAllocator1> & lhs, const ::robot_info::Info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.voltage == rhs.voltage &&
    lhs.orientation == rhs.orientation &&
    lhs.velocity == rhs.velocity &&
    lhs.motor_status == rhs.motor_status &&
    lhs.sonar_status == rhs.sonar_status &&
    lhs.arm_torque == rhs.arm_torque &&
    lhs.arm_status == rhs.arm_status &&
    lhs.cam360_status == rhs.cam360_status &&
    lhs.second_cam_status == rhs.second_cam_status &&
    lhs.map_status == rhs.map_status &&
    lhs.ptz_camera == rhs.ptz_camera;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_info::Info_<ContainerAllocator1> & lhs, const ::robot_info::Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_info

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_info::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_info::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_info::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_info::Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_info::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_info::Info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_info::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e754eb821b149031ec48f77a9ecbbc4";
  }

  static const char* value(const ::robot_info::Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e754eb821b14903ULL;
  static const uint64_t static_value2 = 0x1ec48f77a9ecbbc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_info::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_info/Info";
  }

  static const char* value(const ::robot_info::Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_info::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 voltage\n"
"float64 orientation\n"
"float64 velocity\n"
"int32 motor_status\n"
"float64[] sonar_status\n"
"float64[] arm_torque\n"
"int32 arm_status\n"
"int32 cam360_status\n"
"int32 second_cam_status\n"
"int32 map_status\n"
"int32 ptz_camera\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robot_info::Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_info::Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage);
      stream.next(m.orientation);
      stream.next(m.velocity);
      stream.next(m.motor_status);
      stream.next(m.sonar_status);
      stream.next(m.arm_torque);
      stream.next(m.arm_status);
      stream.next(m.cam360_status);
      stream.next(m.second_cam_status);
      stream.next(m.map_status);
      stream.next(m.ptz_camera);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_info::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_info::Info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "orientation: ";
    Printer<double>::stream(s, indent + "  ", v.orientation);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "motor_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_status);
    s << indent << "sonar_status[]" << std::endl;
    for (size_t i = 0; i < v.sonar_status.size(); ++i)
    {
      s << indent << "  sonar_status[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sonar_status[i]);
    }
    s << indent << "arm_torque[]" << std::endl;
    for (size_t i = 0; i < v.arm_torque.size(); ++i)
    {
      s << indent << "  arm_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.arm_torque[i]);
    }
    s << indent << "arm_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arm_status);
    s << indent << "cam360_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cam360_status);
    s << indent << "second_cam_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.second_cam_status);
    s << indent << "map_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_status);
    s << indent << "ptz_camera: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ptz_camera);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_INFO_MESSAGE_INFO_H
